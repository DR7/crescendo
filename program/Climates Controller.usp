/*
 * Adelyte Company
 * www.adelyte.com
 */

#SYMBOL_NAME "Climates Controller"
#CATEGORY "46" "Crescendo" // Custom
#DEFAULT_VOLATILE
#ENABLE_DYNAMIC
// #ENABLE_TRACE

// Constants
#DEFINE_CONSTANT #TEXT_LEN    48
#DEFINE_CONSTANT #ITEMS_MAX   48
#DEFINE_CONSTANT #ROOMS_MAX   99

// Inputs and Outputs
DIGITAL_INPUT Initialize;
DIGITAL_INPUT Move_Room[#ITEMS_MAX];
DIGITAL_INPUT Room_Volume_Mute_Is_On[#ROOMS_MAX];

DIGITAL_OUTPUT Move_Room_Matches[#ITEMS_MAX];
DIGITAL_OUTPUT Share_Visible[#ITEMS_MAX];
DIGITAL_OUTPUT Room_Power_Off[#ROOMS_MAX], Room_Volume_Up[#ROOMS_MAX], Room_Volume_Down[#ROOMS_MAX], Room_Volume_Mute_Toggle[#ROOMS_MAX];

ANALOG_INPUT Room_Is;
ANALOG_INPUT Room_Volume_Is[#ROOMS_MAX];

STRING_OUTPUT Room_Set; // NOTE: SIMPL+ should be case sensitive

ANALOG_OUTPUT Moves_Size, Watches_Size, Listens_Size, Shares_Size;

STRING_INPUT Room_Name_Is[#ROOMS_MAX][#TEXT_LEN];

STRING_OUTPUT Move_Room_Name_Is[#ITEMS_MAX];
STRING_OUTPUT Share_Room_Name_Is[#ITEMS_MAX], Share_Volume_Is[#ITEMS_MAX];

STRING_PARAMETER Rooms[#ITEMS_MAX];

// List Functions
INTEGER __Move_Room__[#ITEMS_MAX], __Room_Move__[#ROOMS_MAX];
INTEGER __Share_Room__[#ITEMS_MAX], __Room_Share__[#ROOMS_MAX];

INTEGER_FUNCTION MoveToRoom(INTEGER move)
{
    INTEGER room;

    room = __Move_Room__[move];

    RETURN(room);
}

INTEGER_FUNCTION RoomToMove(INTEGER room)
{
    INTEGER move;

    move = __Room_Move__[room];

    RETURN(move);
}

INTEGER_FUNCTION ShareToRoom(INTEGER share)
{
    INTEGER room;

    room = __Share_Room__[share];

    RETURN(room);
}

INTEGER_FUNCTION RoomToShare(INTEGER room)
{
    INTEGER share;

    share = __Room_Share__[room];

    RETURN(share);
}

// User Events
PUSH Move_Room
{
    INTEGER move, room;

    move = GETLASTMODIFIEDARRAYINDEX();
    room = MoveToRoom(move);

    IF(room = 0) TERMINATEEVENT;

    MAKESTRING(Room_Set, "\x10%c", room);
}

PUSH Share_Power_Off
{
    INTEGER share, room;

    share = GETLASTMODIFIEDARRAYINDEX();
    room = ShareToRoom(share);

    IF(room = 0) TERMINATEEVENT;

    Room_Power_Off[room] = 1;
    PROCESSLOGIC();
    Room_Power_Off[room] = 0;
}

CHANGE Share_Volume_Up
{
    INTEGER share, room, state;

    share = GETLASTMODIFIEDARRAYINDEX();
    room = ShareToRoom(share);

    IF(room = 0) TERMINATEEVENT;

    state = Share_Volume_Up[share];
    Room_Volume_Up[room] = state;
}

CHANGE Share_Volume_Down
{
    INTEGER share, room, state;

    share = GETLASTMODIFIEDARRAYINDEX();
    room = ShareToRoom(share);

    IF(room = 0) TERMINATEEVENT;

    state = Share_Volume_Down[share];
    Room_Volume_Down[room] = state;
}

PUSH Share_Volume_Mute_Toggle
{
    INTEGER share, room, state;

    share = GETLASTMODIFIEDARRAYINDEX();
    room = ShareToRoom(share);

    IF(room = 0) TERMINATEEVENT;

    Room_Volume_Mute_Toggle[room] = 1;
    PROCESSLOGIC();
    Room_Volume_Mute_Toggle[room] = 0;
}

// Move List
FUNCTION UpdateMoveRoom()
{
    SETARRAY(Move_Room_Matches, 0);

    Move_Room_Matches[Room_Is] = 1;
}

// Watch and Listen Lists
// Share Source List
FUNCTION UpdateShareVolume(INTEGER room)
{
    INTEGER share;

    share = RoomToShare(room);
    IF(share = 0) RETURN;

     MAKESTRING(Share_Volume_Is[share], "%u", Room_Volume_Is[room] / 655);
}
                                                                  
FUNCTION UpdateShareVolumeMute(INTEGER room)
{
    INTEGER share;

    share = RoomToShare(room);
    IF(share = 0) RETURN;

    Share_Volume_Mute_Is_On[share] = Room_Volume_Mute_Is_On[room];
}

// Events
CHANGE Room_Is
{
    UpdateMoveRoom();
    UpdateWatchListen();
}

CHANGE Room_Volume_Is
{
    INTEGER room;

    room = GETLASTMODIFIEDARRAYINDEX();

    UpdateShareVolume(room);
}

CHANGE Room_Volume_Mute_Is_On
{
    INTEGER room;

    room = GETLASTMODIFIEDARRAYINDEX();

    UpdateShareVolumeMute(room);
}

// Initialization
FUNCTION __Init__()
{
    INTEGER item, room;

    SETARRAY(__Move_Room__, 0);
    SETARRAY(__Room_Move__, 0);
    SETARRAY(__Share_Room__, 0);
    SETARRAY(__Room_Share__, 0);

    Moves_Size = LEN(Rooms);
    Shares_Size = Moves_Size;

    FOR(item = 1 TO Moves_Size)
    {
        room = BYTE(Rooms, item);

        __Move_Room__[item] = room;
        __Room_Move__[room] = item;
        __Share_Room__[item] = room;
        __Room_Share__[room] = item;

        Move_Room_Name_Is[item] = Room_Name_Is[room];
        Share_Room_Name_Is[item] = Room_Name_Is[room];
    }

    UpdateMove();
    UpdateWatchListen();
    UpdateShare();
}

CHANGE Initialize
{
    __Init__();
}

FUNCTION Main()
{
    WAITFORINITIALIZATIONCOMPLETE();
}
