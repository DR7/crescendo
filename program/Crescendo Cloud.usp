/*
 * Adelyte Company
 * www.adelyte.com
 */

#SYMBOL_NAME "Crescendo Cloud"
#CATEGORY "46" "Crescendo" // Custom
#DEFAULT_VOLATILE
#ENABLE_DYNAMIC

// Debug Settings
// #DEFINE_CONSTANT #DEBUG 1
#IF_DEFINED #DEBUG
#ENABLE_TRACE
#ENABLE_STACK_CHECKING
#ENDIF

// Constants
#DEFINE_CONSTANT #KEY_VALUE_SIZE    998
#DEFINE_CONSTANT #KEY_VALUE_SIZEx2 1996

#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SIZE 10
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_AMS2 "82.196.14.206"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_AMS3 "188.166.5.178"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_FRA1 "46.101.140.132"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_LON1 "178.62.92.82"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC1 "192.81.215.136"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC2 "162.243.105.241"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC3 "104.236.98.139"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SFO1 "104.236.165.117"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SGP1 "128.199.76.5"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_TOR1 "159.203.30.228"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_PORT 50000

#DEFINE_CONSTANT #MESSAGE_DELIMITER "\x1F\x1E" // unit separator (^_) + record separator (^^)
#DEFINE_CONSTANT #MESSAGE_KEY_DELIMITER ":\x1F " // colon + unit separator (^_) + space


// Inputs and Outputs

DIGITAL_INPUT  Connect, Disconnect, _SKIP_;
DIGITAL_OUTPUT Connected, _SKIP_, _SKIP_;

DIGITAL_INPUT  Digital_Value_Is[#KEY_VALUE_SIZE], _SKIP_;
DIGITAL_OUTPUT Digital_Value[#KEY_VALUE_SIZE], _SKIP_;

STRING_OUTPUT Console_Tx;
BUFFER_INPUT  Console_Rx[65534];

STRING_INPUT  Cloud_Tx[255], User_Program_Command[255];
STRING_OUTPUT Cloud_Rx, _SKIP_;

ANALOG_INPUT  Analog_Value_Is[#KEY_VALUE_SIZE], _SKIP_;
STRING_OUTPUT Analog_Value[#KEY_VALUE_SIZE], _SKIP_; // Analog values are set with strings

STRING_INPUT  Serial_Value_Is[#KEY_VALUE_SIZE][255];
STRING_OUTPUT Serial_Value[#KEY_VALUE_SIZE];

TCP_CLIENT Client[4095];

STRING_PARAMETER Project[32];
STRING_PARAMETER Users[250];
STRING_PARAMETER Server_Region[15];

STRING_PARAMETER Digital_Key[#KEY_VALUE_SIZE][250], _SKIP_, _SKIP_, _SKIP_, _SKIP_;
STRING_PARAMETER Analog_Key[#KEY_VALUE_SIZE][250], _SKIP_;
STRING_PARAMETER Serial_Key[#KEY_VALUE_SIZE][250];

/*
#BEGIN_PARAMETER_PROPERTIES Server_Region

  propValidUnits = unitString;
  propDefaultValue = "NYC";
  propList =
    { "AMS", "Amsterdam" },
    { "FRA", "Frankfurt"},
    { "LON", "London"},
    { "NYC", "New York"},
    { "SFO", "San Francisco"},
    { "SGP", "Singapore"},
    { "TOR", "Toronto"};

#END_PARAMETER_PROPERTIES
*/ 


// Hash Table (simple hash table with linear probing)

/*
Benchmark (RMC3): ~5s
Digital Hash Table: 998 keys, 27 collisions (2%)
Analog Hash Table: 396 keys, 68 collisions (17%)
Serial Hash Table: 297 keys, 25 collisions (8%)
*/

INTEGER_FUNCTION JavaHashCode(STRING key)
{
    INTEGER i, hash;

    IF(key = "")
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    hash = 0;
    FOR(i = 1 TO LEN(key))
    {
        hash = 31 * hash + BYTE(key, i);
    }

    hash = hash MOD #KEY_VALUE_SIZEx2;

    RETURN(hash);
}

/*
Benchmark (RMC3): ~7s
Digital Hash Table: 998 keys, 238 collisions (23%)
Analog Hash Table: 396 keys, 44 collisions (11%)
Serial Hash Table: 297 keys, 25 collisions (8%)
*/

INTEGER __Pearson_Table__[255];

INTEGER_FUNCTION PearsonHashCode(STRING key)
{
    INTEGER i, key_length, hash_low, hash_high, index, char, hash;

    key_length = LEN(key);
    IF(key_length = 0)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    hash_low = 0;
    hash_high = 0xFF;
    FOR(i = 1 TO key_length)
    {
        char = BYTE(key, i);

        index = hash_low ^ char;
        hash_low = __Pearson_Table__[index];

        index = hash_high ^ char;
        hash_high = __Pearson_Table__[index];
    }

    hash = hash_high << 8 | hash_low;
    hash = hash MOD #KEY_VALUE_SIZEx2;

    RETURN(hash);
}

INTEGER __Hash_Code__;

INTEGER_FUNCTION HashCode(STRING key)
{
    INTEGER hash;

    CSWITCH(__Hash_Code__)
    {
        CASE(1):
        {
            hash = JavaHashCode(key);
            BREAK;
        }
        CASE(2):
        {
            hash = PearsonHashCode(key);
            BREAK;
        }
    }

    RETURN(hash);
}

// NOTE: HashSet and HashGet could be generic if parameters were available to functions READONLYBYREF
INTEGER __Digital_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION DigitalHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Digital_Key_Hash_Table__[slot] = 0)
        {
            __Digital_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION DigitalHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Digital_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Digital_Key[index] = key)
        {
            RETURN(index);
        }
    }
}

INTEGER __Analog_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION AnalogHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Analog_Key_Hash_Table__[slot] = 0)
        {
            __Analog_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION AnalogHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Analog_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Analog_Key[index] = key)
        {
            RETURN(index);
        }
    }
}

INTEGER __Serial_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION SerialHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Serial_Key_Hash_Table__[slot] = 0)
        {
            __Serial_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION SerialHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Serial_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Serial_Key[index] = key)
        {
            RETURN(index);
        }
    }
}


// Socket Functions

STRING Hosts[#CRESCENDO_CLOUD_HOST_SIZE][15]; // NOTE: Array declaration is one greater than necessary
INTEGER __Host__;

FUNCTION __Connect__()
{
    SIGNED_INTEGER status;

    status = SOCKETCONNECTCLIENT(Client, Hosts[__Host__], #CRESCENDO_CLOUD_PORT, 1);
    IF(status < 0)
    {
        TRACE("Crescendo Cloud: ERROR %d connecting socket to address '%s' on port  %u", status, Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
    ELSE
    {
        GENERATEUSERNOTICE("Crescendo Cloud: CONNECTED to address '%s' on port  %u", Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
}

FUNCTION Send(STRING tx)
{
    SIGNED_INTEGER status;

    TRACE("Crescendo Cloud: Send '%s'", tx);

    status = SOCKETSEND(Client, tx);
    IF(status < 0)
    {
        TRACE("Crescendo Cloud: ERROR %d connecting socket to address '%s' on port  %u", status, Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
}

FUNCTION SendKeyValue(STRING key, STRING value)
{
    SIGNED_INTEGER status;
    STRING tx[4095];

    MAKESTRING(tx, "%s%s%s%s", key, #MESSAGE_KEY_DELIMITER, value, #MESSAGE_DELIMITER);

    Send(tx);
}


// Console Events

STRING __Console_Tx__[32];

FUNCTION SendConsole(STRING command)
{
    __Console_Tx__ = command;
    CLEARBUFFER(Console_Rx);

    MAKESTRING(Console_Tx, "%s\n", command);
}

FUNCTION SendConsoleDirect(STRING shell, STRING command)
{
    __Console_Tx__ = shell;
    CLEARBUFFER(Console_Rx);

    MAKESTRING(Console_Tx, "%s\n", command);
}

FUNCTION GetVersion()
{
    SendConsole("ver");
}

STRUCTURE SYSTEM
{
    STRING model[16], firmware[30], serial_code[8];
    STRING system_key[32];
    STRING mac_address[18], ip_address[15];
    STRING uptime[20];
    STRING program_runtime[30], program_path[1023], program_file[255];
    STRING program_name[255], program_compiled_at[20];
};

SYSTEM Processor;

FUNCTION SetVersion(STRING console)
{
// EXAMPLE: MC3 Cntrl Eng [v1.010.0060 (Sep 29 2014), #00765E2F]
    
    INTEGER start, end, count;

    // Model
    start = 1;
    end = FIND(" ", console);
    count = end - start;
    Processor.model = MID(console, start, count);

    // Firmware
    start = FIND("[v", console) + 2;
    end = FIND(" ", console, start);
    count = end - start;
    Processor.firmware = MID(console, start, count);

    // Serial Code
    start = FIND(", #", console) + 3;
    end = FIND("]", console, start);
    count = end - start;
    Processor.serial_code = MID(console, start, count);

    SendKeyValue("model", Processor.model);
    SendKeyValue("serial", Processor.serial_code);
    SendKeyValue("firmware", Processor.firmware);
    SendKeyValue("project", Project);
    SendKeyValue("users", Users);
}

FUNCTION GetProgCom()
{
    SendConsole("progcom");
}

FUNCTION SetProgCom(STRING console)
{
/* EXAMPLE:
Program Boot Directory: \SIMPL\app01
Source File:  C:\Users\wes\Code\adelyte_van-de-grift-deer-valley\Lighting\Van de Grift Deer Pointe CP3\Programs\Van de Grift Deer Pointe CP3
Program File: Van de Grift Deer Pointe CP3.smw
System Name:  Van de Grift Deer Pointe CP3
Programmer:   D3 Pro 3.02.008
Compiled On:  12/2/2015 5:37 PM
Compiler Rev: 3.03
SYMLIB Rev:   956
IOLIB Rev:    956
IOPCFG Rev:   4.1.75
CrestronDB:   52.05.013.00
Source Env:   SIMPL Windows v4.03.14
Target Rack:  CP3
Config Rev:   22
Include4.dat: 2.02.046
*/

    INTEGER start, end, count;

    start = FIND("Directory: ", console) + 11;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_runtime = MID(console, start, count);

    start = FIND("Source File:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_path = MID(console, start, count);

    start = FIND("Program File: ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_file = MID(console, start, count);

    start = FIND("System Name:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_name = MID(console, start, count);

    start = FIND("Compiled On:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_compiled_at = MID(console, start, count);

    SendKeyValue("program-runtime", Processor.program_runtime);
    SendKeyValue("program-path", Processor.program_path);
    SendKeyValue("program-file", Processor.program_file);
    SendKeyValue("program-name", Processor.program_name);
    SendKeyValue("program-compiled-at", Processor.program_compiled_at);
}

FUNCTION GetIpConfig()
{
    SendConsole("ipconfig");
}

FUNCTION SetIpConfig(STRING console)
{
/* EXAMPLE:
Ethernet Adapter [LAN9217]:
      Link Status ....... : OK 
      DHCP .............. : OFF 
      MAC Address(es).... : 00.10.7f.1f.57.05 
      IP Address ........ : 10.0.0.151 
      Subnet Mask ....... : 255.255.255.0 
      IPv6 Address....... : fe80::210:7fff:fe1f:5705%5 
      Default Gateway ... : 10.0.0.1 
      DNS Servers........ : None 
 */

    INTEGER start, end, count;

    // MAC Address
    start = FIND("MAC Address(es).... : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.mac_address = MID(console, start, count);

    // IP Address
    start = FIND("IP Address ........ : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.ip_address = MID(console, start, count);

    SendKeyValue("mac-address", Processor.mac_address);
    SendKeyValue("local-ip-address", Processor.ip_address);
}

FUNCTION GetUptime()
{
    SendConsole("uptime");
}

FUNCTION SetUptime(STRING console)
{
/* EXAMPLE
The system has been running for 1 days 20:57:04.00
The system last started on: Sunday, December 06, 2015 at 14:36:36
*/

    INTEGER start, end, count;
    STRING days[5], timestamp[16];

    start = FIND("running for ", console) + 12;
    end = FIND(" days", console, start);
    count = end - start;
    days = MID(console, start, count);

    start = end + 6;
    end = FIND("\r\n", console, start);
    count = end - start;
    timestamp = MID(console, start, count);

    MAKESTRING(Processor.uptime, "%s.%s", days, timestamp);

    SendKeyValue("uptime", Processor.uptime);
}

FUNCTION SetKeyValues()
{
  INTEGER index;

  FOR(index = 1 TO #KEY_VALUE_SIZE)
  {
    IF(Digital_Key[index] != "")
    {
        IF(Digital_Value_Is[index])
        {
            SendKeyValue(Digital_Key[index], "true");
        }
        ELSE
        {
            SendKeyValue(Digital_Key[index], "false");
        }
    }

    IF(Analog_Key[index] != "")
    {
        SendKeyValue(Analog_Key[index], ITOA(Analog_Value_Is[index]));
    }

    IF(Serial_Key[index] != "")
    {
        SendKeyValue(Serial_Key[index], Serial_Value_Is[index]);
    }
  }
}

FUNCTION Heartbeat()
{
    SendKeyValue("updated", TIME());

    WAIT(6000, __Wait_Heartbeat__)
    {
        Heartbeat();
    }
}

STRING __Prompt__[16];

CHANGE Console_Rx
{
    STRING rx[4095], prompt[16];

    IF(__Prompt__ = "")
    {
        __Prompt__ = REMOVE(">", Console_Rx);

        CLEARBUFFER(Console_Rx);
        TERMINATEEVENT;
    }

    rx = GATHER(__Prompt__, Console_Rx);
    rx = LEFT(rx, LEN(rx) - LEN(__Prompt__)); // Trim Prompt

    IF(rx = "")
    {
        TERMINATEEVENT;
    }

    IF(__Console_Tx__ = "ver")
    {
        SetVersion(rx);
        GetIpConfig();
    }
    ELSE IF(__Console_Tx__ = "ipconfig")
    {
        SetIpConfig(rx);
        GetProgCom();
    }
    ELSE IF(__Console_Tx__ = "progcom")
    {
        SetProgCom(rx);
        GetUptime();
    }
    ELSE IF(__Console_Tx__ = "uptime")
    {
        SetUptime(rx);
        Heartbeat();
        SetKeyValues();
    }
    ELSE
    {
        SendKeyValue(__Console_Tx__, rx);
    }
}


// System Events

CHANGE Cloud_Tx
{
    Send(Cloud_Tx);
}


// Socket Events

FUNCTION __Init__()
{
    INTEGER i;

    // Get Console Prompt
    SendConsoleDirect("", "\r");

    // Hash Table Initialization
    SETARRAY(__Digital_Key_Hash_Table__, 0);
    SETARRAY(__Analog_Key_Hash_Table__, 0);
    SETARRAY(__Serial_Key_Hash_Table__, 0);

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        DigitalHashSet(Digital_Key[i], i);
        AnalogHashSet(Analog_Key[i], i);
        SerialHashSet(Serial_Key[i], i);
    }

    GetVersion();
}

SOCKETCONNECT Client
{
    Connected = 1;
    
    __Init__();
}

SOCKETDISCONNECT Client
{
    Connected = 0;
    CLEARBUFFER(Client.SocketRxBuf);
}

SOCKETSTATUS Client
{
    SIGNED_INTEGER status;

    status = SOCKETGETSTATUS();
    TRACE("Crescendo Cloud: STATUS %d", status);

    CSWITCH(status)
    {
        CASE(3): // Connection failed
        CASE(4): // Connection broken remotely
        {
            __Host__ = (__Host__ + 1) MOD #CRESCENDO_CLOUD_HOST_SIZE;

            __Connect__();
        }
    }
}


INTEGER __Parsing__;
STRING __Rx_Buffer__[65534];

INTEGER_FUNCTION IsNumber(STRING text)
{
    INTEGER i, char;

    IF(LEN(text) > 5)
    {
        RETURN(0);
    }

    FOR(i = 1 TO LEN(text))
    {
        char = BYTE(text, i);
        IF(char < '0' || '9' < char)
        {
            RETURN(0);
        } 
    }

    RETURN(1);
}

SOCKETRECEIVE Client
{
    INTEGER i, value;
    STRING rx[255], key[250];

    TRACE("Crescendo Cloud: SocketRxBuf: '%s'", Client.SocketRxBuf);

    __Rx_Buffer__ = __Rx_Buffer__ + Client.SocketRxBuf;
    CLEARBUFFER(Client.SocketRxBuf);

    IF(__Parsing__ = 1)
    {
        TERMINATEEVENT;
    }

    __Parsing__ = 1;

    WHILE(LEN(__Rx_Buffer__) > 0)
    {
        rx = REMOVE(#MESSAGE_DELIMITER, __Rx_Buffer__);

        TRACE("Crescendo Cloud: rx: '%s'", rx);
        rx = LEFT(rx, LEN(rx) - 2); // trim delimiter
  
        #IF_DEFINED #DEBUG
        Cloud_Rx = rx;
        #ENDIF
  
        key = REMOVE(#MESSAGE_KEY_DELIMITER, rx);
        key = LEFT(key, LEN(key) - 3); // trim delimiter
  
        TRACE("Crescendo Cloud: key:value %s:%s", key, rx);
  
        IF("shell" = LEFT(key, 5))
        {
            SendConsoleDirect(key, rx);
        }
        ELSE
        {
            IF(rx = "true" || rx = "false" || rx = "pulse")
            {
                i = DigitalHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    IF(rx = "true")
                    {
                        Digital_Value[i] = 1;
                    }
                    ELSE IF(rx = "false")
                    {
                        Digital_Value[i] = 0;
                    }
                    ELSE
                    {
                        Digital_Value[i] = 1;
                        PROCESSLOGIC();
                        Digital_Value[i] = 0;
                    }
                }
            }
            ELSE IF(IsNumber(rx))
            {
                i = AnalogHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    value = ATOI(rx);
                    IF(value > 255)
                    {
                        MAKESTRING(Analog_Value[i], "%c%c", HIGH(value), LOW(value));
                    }
                    ELSE
                    {
                        MAKESTRING(Analog_Value[i], "%c", value);
                    }
                }
            }
            ELSE
            {
                i = SerialHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    Serial_Value[i] = rx;
                }
            }
        }

        PROCESSLOGIC();
    }

    __Parsing__ = 0;
}


// Key-Value Store

PUSH Digital_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Digital_Value_Is[%u] true", index);

    IF(Connected)
    {
        SendKeyValue(Digital_Key[index], "true");
    }
}

RELEASE Digital_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Digital_Value_Is[%u] false", index);

    IF(Connected)
    {
        SendKeyValue(Digital_Key[index], "false");
    }
}

CHANGE Analog_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Analog_Value_Is[%u] = %u", index, Analog_Value_Is[index]);

    IF(Connected)
    {
        SendKeyValue(Analog_Key[index], ITOA(LOW(Analog_Value_Is[index]))); // FIXME: hack route to ID
    }
}

CHANGE Serial_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Serial_Value_Is[%u] = '%s'", index, Serial_Value_Is[index]);

    IF(Connected)
    {
        SendKeyValue(Serial_Key[index], Serial_Value_Is[index]);
    }
}


// Runtime

PUSH Connect
{
    // TODO: check if socket is connected
    __Connect__();
}

PUSH Disconnect
{
    // TODO: check if socket is connected
    SOCKETDISCONNECTCLIENT(Client);
}

FUNCTION __Inspect__()
{
    INTEGER i, j, hash, slot,
            digital_keys, digital_collisions,
            analog_keys, analog_collisions,
            serial_keys, serial_collisions;
    STRING key[255], match[2];

    digital_keys = 0;
    digital_collisions = 0;
    analog_keys = 0;
    analog_collisions = 0;
    serial_keys = 0;
    serial_collisions = 0;

    PRINT("Param Hash    Slot    | Key\n"); 
    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Digital_Key[i];
        IF(key != "")
        {
            digital_keys = digital_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Digital_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                digital_collisions = digital_collisions + 1;
            }
	
	        PRINT("D-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Analog_Key[i];
        IF(key != "")
        {
            analog_keys = analog_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Analog_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                analog_collisions = analog_collisions + 1;
            }
	
	        PRINT("A-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Serial_Key[i];
        IF(key != "")
        {
            serial_keys = serial_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Serial_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                serial_collisions = serial_collisions + 1;
            }
	
	        PRINT("S-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    IF(digital_keys > 0)
    {
        PRINT("Digital Hash Table: %u keys, %u collisions (%u%%)\n", digital_keys, digital_collisions, MULDIV(digital_collisions, 100, digital_keys));
    }

    IF(analog_keys > 0)
    {
        PRINT("Analog Hash Table: %u keys, %u collisions (%u%%)\n", analog_keys, analog_collisions, MULDIV(analog_collisions, 100, analog_keys));
    }

    IF(serial_keys > 0)
    {
        PRINT("Serial Hash Table: %u keys, %u collisions (%u%%)\n", serial_keys, serial_collisions, MULDIV(serial_collisions, 100, serial_keys));
    }
}

CHANGE User_Program_Command
{
    INTEGER i, hash, start, end, benchmark;
    STRING rx[255];

    IF(User_Program_Command = "cloud inspect")
    {
        __Inspect__();
    }
    ELSE IF(User_Program_Command = "cloud inspect all")
    {
        PRINT("\n\nStarting Inspection ...\n");
        FOR(__Hash_Code__ = 1 TO 2)
        {
            __Init__();
            __Inspect__();
        }

        __Hash_Code__ = 1;
    }
    ELSE IF(User_Program_Command = "cloud benchmark")
    {
        PRINT("\n\nStarting Benchmark ...\n");
        FOR(__Hash_Code__ = 1 TO 2)
        {
	        start = GETHSECONDS();
	        FOR(i = 1 TO 65534)
	        {
	            hash = HashCode("benchmark-this-key-74");
	        }
	        end = GETHSECONDS();
	
	        IF(end > start)
	        {
	            benchmark = end - start;
	        }
	        ELSE
	        {
	            benchmark = (65535 - start + 1) + end;
	        }
	        PRINT("HashCode %u: %u\n",__Hash_Code__, benchmark);
        }

        __Hash_Code__ = 1;
    }
    ELSE IF(User_Program_Command = "cloud init")
    {
        __Init__();
    }
    ELSE IF(LEFT(User_Program_Command, 10) = "cloud hash")
    {
        rx = RIGHT(User_Program_Command, LEN(User_Program_Command) - 11);
        hash = HashCode(rx);
        PRINT("cloud hash is %04u\n", hash);
    }
}

FUNCTION Main()
{
    STRING regions[7][3];
    INTEGER permutation;

    __Parsing__ = 0;
    __Prompt__ = "";
    __Rx_Buffer__ = "";
    __Hash_Code__ = 1; // JavaHashCode

    WAITFORINITIALIZATIONCOMPLETE();

    // Pearson Hash Substitution Table
    /* RUBY
        (0..255).to_a.shuffle.each_with_index do |n, i|
            value = "0x#{n.to_s(16).upcase.rjust(2, '0')}"
            puts "    __Pearson_Table__[#{i.to_s.rjust(3, '0')}] = #{value};"
        end
    */
    __Pearson_Table__[000] = 0x25;
    __Pearson_Table__[001] = 0xDE;
    __Pearson_Table__[002] = 0xED;
    __Pearson_Table__[003] = 0x64;
    __Pearson_Table__[004] = 0x7B;
    __Pearson_Table__[005] = 0x54;
    __Pearson_Table__[006] = 0xE9;
    __Pearson_Table__[007] = 0x98;
    __Pearson_Table__[008] = 0x21;
    __Pearson_Table__[009] = 0x01;
    __Pearson_Table__[010] = 0xD7;
    __Pearson_Table__[011] = 0x92;
    __Pearson_Table__[012] = 0xA3;
    __Pearson_Table__[013] = 0x7F;
    __Pearson_Table__[014] = 0xD1;
    __Pearson_Table__[015] = 0x29;
    __Pearson_Table__[016] = 0x48;
    __Pearson_Table__[017] = 0xE3;
    __Pearson_Table__[018] = 0xFD;
    __Pearson_Table__[019] = 0x91;
    __Pearson_Table__[020] = 0x3D;
    __Pearson_Table__[021] = 0x00;
    __Pearson_Table__[022] = 0xB2;
    __Pearson_Table__[023] = 0x88;
    __Pearson_Table__[024] = 0x5C;
    __Pearson_Table__[025] = 0x75;
    __Pearson_Table__[026] = 0xE0;
    __Pearson_Table__[027] = 0x8F;
    __Pearson_Table__[028] = 0x0A;
    __Pearson_Table__[029] = 0x26;
    __Pearson_Table__[030] = 0x86;
    __Pearson_Table__[031] = 0x18;
    __Pearson_Table__[032] = 0xD5;
    __Pearson_Table__[033] = 0xEE;
    __Pearson_Table__[034] = 0x4B;
    __Pearson_Table__[035] = 0xF6;
    __Pearson_Table__[036] = 0xC2;
    __Pearson_Table__[037] = 0xEF;
    __Pearson_Table__[038] = 0x9A;
    __Pearson_Table__[039] = 0xF9;
    __Pearson_Table__[040] = 0xEC;
    __Pearson_Table__[041] = 0x24;
    __Pearson_Table__[042] = 0xAE;
    __Pearson_Table__[043] = 0xDD;
    __Pearson_Table__[044] = 0xE7;
    __Pearson_Table__[045] = 0x5B;
    __Pearson_Table__[046] = 0xFB;
    __Pearson_Table__[047] = 0x53;
    __Pearson_Table__[048] = 0x2C;
    __Pearson_Table__[049] = 0xF5;
    __Pearson_Table__[050] = 0x0D;
    __Pearson_Table__[051] = 0xC3;
    __Pearson_Table__[052] = 0x0E;
    __Pearson_Table__[053] = 0x5D;
    __Pearson_Table__[054] = 0x06;
    __Pearson_Table__[055] = 0x19;
    __Pearson_Table__[056] = 0xD8;
    __Pearson_Table__[057] = 0xCC;
    __Pearson_Table__[058] = 0x95;
    __Pearson_Table__[059] = 0x16;
    __Pearson_Table__[060] = 0x7A;
    __Pearson_Table__[061] = 0x7C;
    __Pearson_Table__[062] = 0xAB;
    __Pearson_Table__[063] = 0x9C;
    __Pearson_Table__[064] = 0xCB;
    __Pearson_Table__[065] = 0x74;
    __Pearson_Table__[066] = 0xEB;
    __Pearson_Table__[067] = 0x96;
    __Pearson_Table__[068] = 0x47;
    __Pearson_Table__[069] = 0xE6;
    __Pearson_Table__[070] = 0x40;
    __Pearson_Table__[071] = 0x2F;
    __Pearson_Table__[072] = 0x45;
    __Pearson_Table__[073] = 0xB1;
    __Pearson_Table__[074] = 0x8C;
    __Pearson_Table__[075] = 0x8D;
    __Pearson_Table__[076] = 0x5F;
    __Pearson_Table__[077] = 0x52;
    __Pearson_Table__[078] = 0x1C;
    __Pearson_Table__[079] = 0xBC;
    __Pearson_Table__[080] = 0x4F;
    __Pearson_Table__[081] = 0xF3;
    __Pearson_Table__[082] = 0xB7;
    __Pearson_Table__[083] = 0xC1;
    __Pearson_Table__[084] = 0x05;
    __Pearson_Table__[085] = 0xD9;
    __Pearson_Table__[086] = 0x1E;
    __Pearson_Table__[087] = 0x46;
    __Pearson_Table__[088] = 0xA0;
    __Pearson_Table__[089] = 0x76;
    __Pearson_Table__[090] = 0x17;
    __Pearson_Table__[091] = 0x5E;
    __Pearson_Table__[092] = 0xF7;
    __Pearson_Table__[093] = 0x11;
    __Pearson_Table__[094] = 0xFC;
    __Pearson_Table__[095] = 0x90;
    __Pearson_Table__[096] = 0x83;
    __Pearson_Table__[097] = 0xC7;
    __Pearson_Table__[098] = 0xE4;
    __Pearson_Table__[099] = 0x22;
    __Pearson_Table__[100] = 0x4C;
    __Pearson_Table__[101] = 0x28;
    __Pearson_Table__[102] = 0x32;
    __Pearson_Table__[103] = 0x56;
    __Pearson_Table__[104] = 0xB9;
    __Pearson_Table__[105] = 0xB8;
    __Pearson_Table__[106] = 0x93;
    __Pearson_Table__[107] = 0x6D;
    __Pearson_Table__[108] = 0xD2;
    __Pearson_Table__[109] = 0x97;
    __Pearson_Table__[110] = 0x27;
    __Pearson_Table__[111] = 0x89;
    __Pearson_Table__[112] = 0x9F;
    __Pearson_Table__[113] = 0xB3;
    __Pearson_Table__[114] = 0xF4;
    __Pearson_Table__[115] = 0x6C;
    __Pearson_Table__[116] = 0x4D;
    __Pearson_Table__[117] = 0xAA;
    __Pearson_Table__[118] = 0xCA;
    __Pearson_Table__[119] = 0x85;
    __Pearson_Table__[120] = 0xB4;
    __Pearson_Table__[121] = 0xE1;
    __Pearson_Table__[122] = 0x8A;
    __Pearson_Table__[123] = 0x2D;
    __Pearson_Table__[124] = 0xAF;
    __Pearson_Table__[125] = 0xD0;
    __Pearson_Table__[126] = 0x77;
    __Pearson_Table__[127] = 0x9E;
    __Pearson_Table__[128] = 0xB5;
    __Pearson_Table__[129] = 0x67;
    __Pearson_Table__[130] = 0x07;
    __Pearson_Table__[131] = 0x81;
    __Pearson_Table__[132] = 0xC6;
    __Pearson_Table__[133] = 0x08;
    __Pearson_Table__[134] = 0x70;
    __Pearson_Table__[135] = 0xBD;
    __Pearson_Table__[136] = 0x3E;
    __Pearson_Table__[137] = 0x44;
    __Pearson_Table__[138] = 0xDC;
    __Pearson_Table__[139] = 0x7D;
    __Pearson_Table__[140] = 0x8E;
    __Pearson_Table__[141] = 0xBE;
    __Pearson_Table__[142] = 0x3A;
    __Pearson_Table__[143] = 0xBF;
    __Pearson_Table__[144] = 0x62;
    __Pearson_Table__[145] = 0x94;
    __Pearson_Table__[146] = 0x30;
    __Pearson_Table__[147] = 0x6F;
    __Pearson_Table__[148] = 0x42;
    __Pearson_Table__[149] = 0xB0;
    __Pearson_Table__[150] = 0x79;
    __Pearson_Table__[151] = 0xF0;
    __Pearson_Table__[152] = 0x65;
    __Pearson_Table__[153] = 0x23;
    __Pearson_Table__[154] = 0x0F;
    __Pearson_Table__[155] = 0x09;
    __Pearson_Table__[156] = 0xA4;
    __Pearson_Table__[157] = 0xEA;
    __Pearson_Table__[158] = 0x6B;
    __Pearson_Table__[159] = 0x04;
    __Pearson_Table__[160] = 0xD3;
    __Pearson_Table__[161] = 0x4A;
    __Pearson_Table__[162] = 0xAC;
    __Pearson_Table__[163] = 0x58;
    __Pearson_Table__[164] = 0x84;
    __Pearson_Table__[165] = 0x57;
    __Pearson_Table__[166] = 0xE2;
    __Pearson_Table__[167] = 0xCE;
    __Pearson_Table__[168] = 0x02;
    __Pearson_Table__[169] = 0x34;
    __Pearson_Table__[170] = 0x68;
    __Pearson_Table__[171] = 0x38;
    __Pearson_Table__[172] = 0x66;
    __Pearson_Table__[173] = 0xAD;
    __Pearson_Table__[174] = 0x82;
    __Pearson_Table__[175] = 0x2B;
    __Pearson_Table__[176] = 0xA2;
    __Pearson_Table__[177] = 0x6E;
    __Pearson_Table__[178] = 0xA7;
    __Pearson_Table__[179] = 0x5A;
    __Pearson_Table__[180] = 0x71;
    __Pearson_Table__[181] = 0xB6;
    __Pearson_Table__[182] = 0x61;
    __Pearson_Table__[183] = 0xE8;
    __Pearson_Table__[184] = 0xCD;
    __Pearson_Table__[185] = 0x49;
    __Pearson_Table__[186] = 0x3B;
    __Pearson_Table__[187] = 0x0B;
    __Pearson_Table__[188] = 0x2A;
    __Pearson_Table__[189] = 0x63;
    __Pearson_Table__[190] = 0x39;
    __Pearson_Table__[191] = 0x55;
    __Pearson_Table__[192] = 0x12;
    __Pearson_Table__[193] = 0xC0;
    __Pearson_Table__[194] = 0x1D;
    __Pearson_Table__[195] = 0xFA;
    __Pearson_Table__[196] = 0x1A;
    __Pearson_Table__[197] = 0x14;
    __Pearson_Table__[198] = 0x87;
    __Pearson_Table__[199] = 0xBA;
    __Pearson_Table__[200] = 0xA1;
    __Pearson_Table__[201] = 0xFF;
    __Pearson_Table__[202] = 0xC4;
    __Pearson_Table__[203] = 0xD6;
    __Pearson_Table__[204] = 0x51;
    __Pearson_Table__[205] = 0x78;
    __Pearson_Table__[206] = 0x20;
    __Pearson_Table__[207] = 0x36;
    __Pearson_Table__[208] = 0xA6;
    __Pearson_Table__[209] = 0x9B;
    __Pearson_Table__[210] = 0x15;
    __Pearson_Table__[211] = 0xD4;
    __Pearson_Table__[212] = 0x72;
    __Pearson_Table__[213] = 0x3F;
    __Pearson_Table__[214] = 0xC9;
    __Pearson_Table__[215] = 0x8B;
    __Pearson_Table__[216] = 0x4E;
    __Pearson_Table__[217] = 0x41;
    __Pearson_Table__[218] = 0xA9;
    __Pearson_Table__[219] = 0x33;
    __Pearson_Table__[220] = 0x60;
    __Pearson_Table__[221] = 0xA5;
    __Pearson_Table__[222] = 0x0C;
    __Pearson_Table__[223] = 0x13;
    __Pearson_Table__[224] = 0x3C;
    __Pearson_Table__[225] = 0x03;
    __Pearson_Table__[226] = 0xBB;
    __Pearson_Table__[227] = 0xF1;
    __Pearson_Table__[228] = 0x73;
    __Pearson_Table__[229] = 0xDA;
    __Pearson_Table__[230] = 0xF2;
    __Pearson_Table__[231] = 0x31;
    __Pearson_Table__[232] = 0x35;
    __Pearson_Table__[233] = 0x43;
    __Pearson_Table__[234] = 0x69;
    __Pearson_Table__[235] = 0xA8;
    __Pearson_Table__[236] = 0x80;
    __Pearson_Table__[237] = 0xC5;
    __Pearson_Table__[238] = 0xCF;
    __Pearson_Table__[239] = 0xE5;
    __Pearson_Table__[240] = 0xFE;
    __Pearson_Table__[241] = 0x9D;
    __Pearson_Table__[242] = 0x1F;
    __Pearson_Table__[243] = 0x1B;
    __Pearson_Table__[244] = 0x7E;
    __Pearson_Table__[245] = 0x59;
    __Pearson_Table__[246] = 0xDB;
    __Pearson_Table__[247] = 0x10;
    __Pearson_Table__[248] = 0x99;
    __Pearson_Table__[249] = 0xC8;
    __Pearson_Table__[250] = 0x6A;
    __Pearson_Table__[251] = 0x50;
    __Pearson_Table__[252] = 0x2E;
    __Pearson_Table__[253] = 0xDF;
    __Pearson_Table__[254] = 0xF8;
    __Pearson_Table__[255] = 0x37;

    // Client-side Load Balancing
    permutation = RANDOM(1, 6);

    IF(Server_Region = "AMS")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "FRA")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "LON")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "NYC")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "SFO")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "SGP")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "TOR")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }

    __Host__ = 0;
}
